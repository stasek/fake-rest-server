buildscript {
    ext.kotlin_version = '1.2.30'
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.novoda:bintray-release:0.8.0'
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'
    }

}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'kotlin'
apply plugin: 'com.novoda.bintray-release'
apply plugin: 'org.junit.platform.gradle.plugin'

group = 'ru.svnik.tests'
//version = getGitVersionLong()

if (project.hasProperty("bu")) {
    version = getGitVersion()
    processResources {
        include("/error.json", "/resource.json", "/log4j.properties")
    }
} else {
    version = getGitVersionLong()
    processResources {
        include("/error.json", "/resource.json", "/log4j.properties")
    }
}

description = """"""

sourceCompatibility = 1.8
targetCompatibility = 1.8



repositories {
    maven { url "http://repo.maven.apache.org/maven2" }
    jcenter { url "http://jcenter.bintray.com/" }
}

dependencies {
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.2'
    compile group: 'io.javalin', name: 'javalin', version: '1.2.1'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    compile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'org.testng', name: 'testng', version: '6.13.1'
    compile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.1.0'
    compile 'io.rest-assured:rest-assured:3.1.0'
    testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.1.0'
    testRuntime group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.1.0'
    testCompile group: 'khttp', name: 'khttp', version: '0.1.0'
    testCompile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: '1.2.21'
    testCompile 'org.junit.platform:junit-platform-gradle-plugin:1.1.0-M1'
    testCompile group: 'org.jetbrains.kotlin', name: 'kotlin-test', version: '1.2.0'
    testCompile group: 'org.mockito', name: 'mockito-inline', version: '2.7.13'
    testCompile('com.nhaarman:mockito-kotlin:1.5.0') {
        exclude group: 'org.jetbrains.kotlin'
        exclude group: 'org.mockito'
    }
}

task app(type: Jar, dependsOn: test) {
    manifest {
        attributes 'Implementation-Title': 'App version',
                'Implementation-Version': version,
                'Main-Class': 'ru.svnik.tests.server.Main'
    }
    baseName = project.name + '-app'

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

task lib(type: Jar, dependsOn: test) {
    manifest {
        attributes 'Implementation-Title': 'Lid version',
                'Implementation-Version': version
    }
    baseName = project.name
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

junitPlatform {
    filters {
        engines {
            include 'junit-jupiter'
            //include 'junit-vintage'
        }
        logManager 'org.apache.logging.log4j.jul.LogManager'
        enableStandardTestTask true
    }
}

test {
    testLogging {
        events 'started', 'passed'
    }
    processResources {
        include("/robots.json", "/res.json", "/log4j.properties")
    }

}

task testNG(type: Test) {
    testLogging {
        events 'started', 'passed'
    }
    useTestNG()
}


jar {
    if (project.hasProperty("bu")) {
        exclude("ru/svnik/tests/server/Main*")
    }
}


publish {
    groupId = group
    artifactId = 'fake-rest-server'
    publishVersion = getGitVersion()
    desc = 'Fake REST server for testing'
    licences = ['MIT']
    website = 'https://github.com/stasek/fake-rest-server'
}

def getGitVersionLong() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags', '--long'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getGitVersion() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim().split("-")[0]
}